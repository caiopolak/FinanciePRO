Vamos analisar o projeto e identificar as funcionalidades faltantes:

1. **Autenticação e Registro**:

- No `index.html`, a funcionalidade de login está implementada, mas falta a de registro e recuperação de senha.

- No backend, as rotas de registro, recuperação de senha e reset de senha existem em `auth.py`, mas não estão integradas no frontend.

2. **Navegação**:

- O menu lateral no `index.html` tem várias opções, mas apenas o Dashboard está funcional. As outras páginas (Transações, Metas, Investimentos, Orçamentos, Configurações, Assinatura) precisam ser criadas.

3. **Dashboard**:

- O dashboard carrega dados, mas a lógica para calcular as mudanças percentuais (em relação ao mês anterior) não está implementada no backend (a rota `/api/dashboard/summary` atualmente retorna apenas o resumo do mês atual, sem dados históricos para comparação).

4. **Transações**:

- A página de transações não existe. Precisamos de uma página para listar, adicionar, editar e excluir transações.

- O botão "Nova Transação" no dashboard deve abrir um modal ou redirecionar para a página de transações.

5. **Metas**:

- A página de metas não existe. Deve permitir adicionar, visualizar e atualizar o progresso das metas.

6. **Investimentos**:

- A página de investimentos não existe. Deve listar investimentos e permitir adicionar novos.

7. **Orçamentos**:

- A página de orçamentos não existe. Deve permitir definir orçamentos por categoria e visualizar alertas.

8. **Assinatura**:

- A página de assinatura não existe. Deve mostrar o plano atual e permitir atualizar/cancelar a assinatura.

9. **Configurações**:

- A página de configurações não existe. Deve permitir ao usuário alterar suas preferências.

10. **Notificações**:

- O botão de notificações no dashboard deve mostrar as notificações não lidas.

11. **Logout**:

- A funcionalidade de logout está implementada no backend, mas no frontend a função `logout` apenas limpa o localStorage e redireciona para a página de login. Precisamos implementar a chamada ao endpoint de logout no backend.

12. **Integração com Stripe**:

- A criação de assinaturas no frontend (quando o usuário escolhe um plano) não está implementada.

13. **Responsividade**:

- O layout é responsivo, mas algumas páginas podem precisar de ajustes.

Vamos começar a implementar as funcionalidades passo a passo.

### Passo 1: Melhorar o sistema de autenticação no frontend

No `index.html`, vamos adicionar funcionalidades de registro e recuperação de senha.

**Registro**:

- Criar um formulário de registro (similar ao de login) que colete nome, email e senha.

- Ao enviar, chamar a rota `/auth/register` e, em caso de sucesso, fazer login automaticamente.

**Recuperação de senha**:

- Criar um formulário para inserir o email (para enviar o link de recuperação).

- Criar um formulário para inserir a nova senha e o token (que virá por email).

### Passo 2: Criar as páginas faltantes

Precisamos criar as páginas para:

- Transações

- Metas

- Investimentos

- Orçamentos

- Configurações

- Assinatura

Como estamos em uma SPA (Single Page Application), podemos usar rotas no frontend (não implementadas) ou carregar conteúdo dinamicamente. Vamos optar por carregar conteúdo dinamicamente no mesmo `index.html` usando JavaScript para trocar as views.

### Passo 3: Implementar a lógica do dashboard

A rota `/api/dashboard/summary` atualmente retorna:

```json

{

"balance": ...,

"income": ...,

"expenses": ...,

"category_summary": ...,

"goals_progress": ...

}

```

Precisamos adicionar dados comparativos com o mês anterior para as métricas de saldo, receitas e despesas.

### Passo 4: Implementar as chamadas de API para as novas páginas

Cada página (transações, metas, etc.) precisará de funções JavaScript para carregar os dados correspondentes da API.

### Passo 5: Implementar a integração com Stripe para assinaturas

No frontend, quando o usuário escolher um plano, precisamos:

- Chamar a rota `/api/subscription` para criar a assinatura.

- Usar o `client_secret` retornado para confirmar o pagamento com o Stripe.

### Considerações

Dado o escopo, não é possível reescrever todo o código aqui, mas vamos focar em:

1. Adicionar funcionalidades de registro e recuperação de senha no `index.html`.

2. Implementar a navegação entre páginas.

3. Implementar a página de transações como exemplo.

Vamos modificar o `index.html` para incluir:

### 1. Formulário de Registro:

Adicionaremos um formulário de registro no overlay de login, que será mostrado quando o usuário clicar em "Criar conta".

### 2. Formulário de Recuperação de Senha:

Adicionaremos um formulário para solicitar recuperação e outro para redefinir a senha.

### 3. Navegação:

Vamos esconder o conteúdo do dashboard e mostrar apenas quando a rota for a correta. Vamos criar uma função `loadView(viewName)` que carrega o conteúdo da view desejada.

### 4. Página de Transações:

Criaremos uma tabela para listar as transações, com opções de editar e excluir, e um botão para adicionar nova transação.

Devido à limitação de espaço, vamos focar em implementar o registro e a navegação básica, e a página de transações.

Aqui está o código atualizado do `index.html` com as funcionalidades de registro e recuperação de senha, e a estrutura para múltiplas páginas:

```html

<!DOCTYPE html>

<html lang="pt-BR">

<head>

... (o mesmo head anterior) ...

</head>

<body>

... (o mesmo body anterior) ...

<!-- Adicionando formulário de registro -->

<div class="login-overlay" id="registerOverlay">

<div class="login-container">

<div class="logo">

<span>FinanciePRO</span>

</div>

<form id="registerForm">

<div class="form-group">

<label for="regName">Nome</label>

<input type="text" id="regName" name="name" required>

</div>

<div class="form-group">

<label for="regEmail">Email</label>

<input type="email" id="regEmail" name="email" required>

</div>

<div class="form-group">

<label for="regPassword">Senha</label>

<input type="password" id="regPassword" name="password" required>

</div>

<button type="submit" class="btn btn-primary">Registrar</button>

</form>

<div class="login-links">

<a href="#" id="backToLoginLink">Voltar para login</a>

</div>

</div>

</div>

<!-- Adicionando formulário de recuperação de senha -->

<div class="login-overlay" id="forgotPasswordOverlay">

<div class="login-container">

<div class="logo">

<span>FinanciePRO</span>

</div>

<form id="forgotPasswordForm">

<div class="form-group">

<label for="forgotEmail">Email</label>

<input type="email" id="forgotEmail" name="email" required>

</div>

<button type="submit" class="btn btn-primary">Enviar link de recuperação</button>

</form>

<div class="login-links">

<a href="#" id="backToLoginFromForgotLink">Voltar para login</a>

</div>

</div>

</div>

<!-- Adicionando formulário de redefinição de senha -->

<div class="login-overlay" id="resetPasswordOverlay">

<div class="login-container">

<div class="logo">

<span>FinanciePRO</span>

</div>

<form id="resetPasswordForm">

<div class="form-group">

<label for="resetToken">Token</label>

<input type="text" id="resetToken" name="token" required>

</div>

<div class="form-group">

<label for="resetPassword">Nova Senha</label>

<input type="password" id="resetPassword" name="new_password" required>

</div>

<button type="submit" class="btn btn-primary">Redefinir Senha</button>

</form>

<div class="login-links">

<a href="#" id="backToLoginFromResetLink">Voltar para login</a>

</div>

</div>

</div>

<script>

... (código JavaScript existente) ...

// Variáveis para controlar a view atual

let currentView = 'dashboard';

// Elementos para os overlays de registro e recuperação

const registerOverlay = document.getElementById('registerOverlay');

const forgotPasswordOverlay = document.getElementById('forgotPasswordOverlay');

const resetPasswordOverlay = document.getElementById('resetPasswordOverlay');

// Adicionar event listeners para os links de registro e recuperação

document.getElementById('registerLink').addEventListener('click', function(e) {

e.preventDefault();

loginOverlay.style.display = 'none';

registerOverlay.style.display = 'flex';

});

document.getElementById('forgotPasswordLink').addEventListener('click', function(e) {

e.preventDefault();

loginOverlay.style.display = 'none';

forgotPasswordOverlay.style.display = 'flex';

});

document.getElementById('backToLoginLink').addEventListener('click', function(e) {

e.preventDefault();

registerOverlay.style.display = 'none';

loginOverlay.style.display = 'flex';

});

document.getElementById('backToLoginFromForgotLink').addEventListener('click', function(e) {

e.preventDefault();

forgotPasswordOverlay.style.display = 'none';

loginOverlay.style.display = 'flex';

});

document.getElementById('backToLoginFromResetLink').addEventListener('click', function(e) {

e.preventDefault();

resetPasswordOverlay.style.display = 'none';

loginOverlay.style.display = 'flex';

});

// Formulário de registro

document.getElementById('registerForm').addEventListener('submit', function(e) {

e.preventDefault();

const name = document.getElementById('regName').value;

const email = document.getElementById('regEmail').value;

const password = document.getElementById('regPassword').value;

loadingOverlay.style.display = 'flex';

fetch('/auth/register', {

method: 'POST',

headers: {

'Content-Type': 'application/json'

},

body: JSON.stringify({ name, email, password })

})

.then(response => {

if (!response.ok) {

throw new Error('Erro ao registrar');

}

return response.json();

})

.then(data => {

// Armazenar token e dados do usuário

localStorage.setItem('authToken', data.token);

localStorage.setItem('userId', data.user.id);

localStorage.setItem('userName', data.user.name);

localStorage.setItem('userPlan', data.user.plan);

// Atualizar variáveis globais

authToken = data.token;

userId = data.user.id;

userName = data.user.name;

userPlan = data.user.plan;

// Esconder overlays

registerOverlay.style.display = 'none';

loadingOverlay.style.display = 'none';

// Carregar dados

loadUserData();

loadDashboardData();

})

.catch(error => {

loadingOverlay.style.display = 'none';

alert(error.message);

});

});

// Formulário de recuperação de senha

document.getElementById('forgotPasswordForm').addEventListener('submit', function(e) {

e.preventDefault();

const email = document.getElementById('forgotEmail').value;

loadingOverlay.style.display = 'flex';

fetch('/auth/forgot-password', {

method: 'POST',

headers: {

'Content-Type': 'application/json'

},

body: JSON.stringify({ email })

})

.then(response => {

if (!response.ok) {

throw new Error('Erro ao enviar email de recuperação');

}

return response.json();

})

.then(data => {

loadingOverlay.style.display = 'none';

alert(data.message);

forgotPasswordOverlay.style.display = 'none';

resetPasswordOverlay.style.display = 'flex';

})

.catch(error => {

loadingOverlay.style.display = 'none';

alert(error.message);

});

});

// Formulário de redefinição de senha

document.getElementById('resetPasswordForm').addEventListener('submit', function(e) {

e.preventDefault();

const token = document.getElementById('resetToken').value;

const newPassword = document.getElementById('resetPassword').value;

loadingOverlay.style.display = 'flex';

fetch('/auth/reset-password', {

method: 'POST',

headers: {

'Content-Type': 'application/json'

},

body: JSON.stringify({ token, new_password: newPassword })

})

.then(response => {

if (!response.ok) {

throw new Error('Erro ao redefinir senha');

}

return response.json();

})

.then(data => {

loadingOverlay.style.display = 'none';

alert(data.message);

resetPasswordOverlay.style.display = 'none';

loginOverlay.style.display = 'flex';

})

.catch(error => {

loadingOverlay.style.display = 'none';

alert(error.message);

});

});

// Função para carregar a view (página) desejada

function loadView(viewName) {

currentView = viewName;

// Esconder todas as views

document.querySelectorAll('.view').forEach(view => {

view.style.display = 'none';

});

// Mostrar a view atual

document.getElementById(`${viewName}View`).style.display = 'block';

// Atualizar o menu ativo

document.querySelectorAll('.nav-item').forEach(item => {

item.classList.remove('active');

});

document.querySelector(`.nav-item[data-view="${viewName}"]`).classList.add('active');

// Carregar dados específicos da view

if (viewName === 'dashboard') {

loadDashboardData();

} else if (viewName === 'transactions') {

loadTransactions();

}

// ... outras views

}

// Exemplo de como carregar transações

function loadTransactions() {

// Chamar a API para obter transações

fetch('/api/transactions', {

method: 'GET',

headers: {

'Authorization': `Bearer ${authToken}`

}

})

.then(response => response.json())

.then(transactions => {

// Preencher a tabela de transações

const tableBody = document.getElementById('transactionsTableBody');

tableBody.innerHTML = transactions.map(transaction => `

<tr>

<td>${transaction.date}</td>

<td>${transaction.description}</td>

<td>${transaction.category}</td>

<td>${transaction.type === 'income' ? '+' : '-'} ${formatCurrency(transaction.amount)}</td>

<td>

<button class="btn btn-outline edit-transaction" data-id="${transaction.id}">Editar</button>

<button class="btn btn-danger delete-transaction" data-id="${transaction.id}">Excluir</button>

</td>

</tr>

`).join('');

});

}

// No setupEventListeners, adicionar evento aos itens do menu

document.querySelectorAll('.nav-item[data-view]').forEach(item => {

item.addEventListener('click', function(e) {

e.preventDefault();

const view = this.getAttribute('data-view');

loadView(view);

});

});

... (restante do código) ...

</script>

</body>

</html>

```

### Notas:

1. **Estrutura de views**: Adicionamos `div`s com a classe `view` e um id específico (ex: `dashboardView`, `transactionsView`) no main content. Inicialmente, apenas o dashboard está visível.

2. **Navegação**: Cada item do menu lateral tem um atributo `data-view` que indica qual view carregar. A função `loadView` é responsável por mostrar a view correta e carregar seus dados.

3. **Páginas adicionais**: Para cada nova página, precisamos:

- Adicionar uma `div` no main content com a classe `view` e o id correspondente.

- Implementar uma função para carregar os dados dessa página (ex: `loadTransactions`).

Devido à complexidade e tamanho, não é possível implementar todas as páginas aqui. O código acima é um ponto de partida.

### Melhorias no Backend:

Para o dashboard, a rota `/api/dashboard/summary` precisa ser ajustada para retornar dados comparativos. Sugiro modificar a rota para:

```python

@api_bp.route('/dashboard/summary', methods=['GET'])

def get_dashboard_summary():

... # código existente

# Calcular totais do mês anterior

prev_month = month - 1 if month > 1 else 12

prev_year = year if month > 1 else year - 1

total_income_prev = current_app.db.get_total_by_type(request.user_id, TransactionType.INCOME.value, prev_month, prev_year)

total_expenses_prev = current_app.db.get_total_by_type(request.user_id, TransactionType.EXPENSE.value, prev_month, prev_year)

balance_prev = total_income_prev - total_expenses_prev

# Calcular mudanças percentuais

income_change = ((total_income - total_income_prev) / total_income_prev * 100) if total_income_prev != 0 else 0

expenses_change = ((total_expenses - total_expenses_prev) / total_expenses_prev * 100) if total_expenses_prev != 0 else 0

balance_change = ((balance - balance_prev) / balance_prev * 100) if balance_prev != 0 else 0

return jsonify({

"balance": balance,

"income": total_income,

"expenses": total_expenses,

"balance_change": balance_change,

"income_change": income_change,

"expenses_change": expenses_change,

"category_summary": category_summary,

"goals_progress": goals_progress

}), 200

```